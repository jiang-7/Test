import java.util.Arrays;
class TreeNode{
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}
public class Solution4 {
    public TreeNode reConstructBinaryTree(int[] pre, int[] in) {
        if (pre.length == 0 || in.length == 0) {
            return null;
        }
        //先序的第一个为根节点
        TreeNode root = new TreeNode( pre[0] );
        //循环遍历中序
        for (int i = 0; i < in.length; i++) {
            //在中序中找到根节点
            if (in[i] == pre[0]) {
                root.left=reConstructBinaryTree(Arrays.copyOfRange(pre, 1,i+1 ), Arrays.copyOfRange(in, 0,i ));
                root.right=reConstructBinaryTree(Arrays.copyOfRange(pre,i+1,pre.length ), Arrays.copyOfRange(in, i+1,in.length ));
            }
        }
        return  root;
    }
    private void traverseInOrder(TreeNode root) {
        if (root != null) {
            traverseInOrder(root.left);
            System.out.print(root.val + " ");
            traverseInOrder(root.right);
        }
    }
    public static void  main(String[] args){
        int[] arr1 = {1,2,4,7,3,5,6,8};
        int[] arr2 = {4,7,2,1,5,3,8,6};
        Solution4 S = new Solution4();
        S.traverseInOrder(S.reConstructBinaryTree(arr1,arr2));
    }
}
